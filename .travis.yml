## Documentation: http://docs.travis-ci.com/user/languages/julia/

language: julia

services:
 - postgresql
 - mysql

addons:
  apt:
    packages:
      - unixodbc
      - unixodbc-dev
      - libmyodbc
      - libsqliteodbc
      - odbc-postgresql

julia:
  - 1.0
  - nightly

matrix:
  include:
    - os: linux
      env: POSTGRESQL_VERSION=9.6 PGHOST="/var/run/postgresql"
    - os: osx
  allow_failures:
    - julia: nightly
  fast_finish: true

notifications:
  email: false

git:
  depth: 99999999

before_script:
  # linux - PostgreSQL - 9.6.6
  - if [[ "$TRAVIS_OS_NAME" == linux ]]; then sudo service postgresql stop && sudo service postgresql start $POSTGRESQL_VERSION            ; fi
  - if [[ "$TRAVIS_OS_NAME" == linux ]]; then psql --version                                                                               ; fi
  - if [[ "$TRAVIS_OS_NAME" == linux ]]; then psql -U postgres -tc 'SHOW server_version'                                                   ; fi
  - if [[ "$TRAVIS_OS_NAME" == linux ]]; then psql -U postgres -c '\conninfo'                                                              ; fi
  # linux - MySQL      - 5.6.33
  - if [[ "$TRAVIS_OS_NAME" == linux ]]; then mysql -e 'show variables like "socket";' -uroot                                              ; fi
  # osx   - PostgreSQL - 9.6.5
  - if [[ "$TRAVIS_OS_NAME" == osx   ]]; then rm -rf /usr/local/var/postgres                                                               ; fi
  - if [[ "$TRAVIS_OS_NAME" == osx   ]]; then initdb /usr/local/var/postgres                                                               ; fi
  - if [[ "$TRAVIS_OS_NAME" == osx   ]]; then pg_ctl -D /usr/local/var/postgres start                                                      ; fi
  - if [[ "$TRAVIS_OS_NAME" == osx   ]]; then until createuser -s postgres; do echo "Postgres is unavailable - sleeping"; sleep 0.05; done ; fi
  # osx   - MySQL      - 5.7.21
  - if [[ "$TRAVIS_OS_NAME" == osx   ]]; then brew install   mysql                                                                         ; fi
  - if [[ "$TRAVIS_OS_NAME" == osx   ]]; then brew services start mysql                                                                    ; fi
  - if [[ "$TRAVIS_OS_NAME" == osx   ]]; then mysql.server start                                                                           ; fi
  - if [[ "$TRAVIS_OS_NAME" == osx   ]]; then sleep 0.1                                                                                    ; fi
  - psql -c "CREATE DATABASE postgresqltest;" -U postgres
  - psql --version
  - mysql -e 'CREATE DATABASE mysqltest;' -uroot
  - mysql -e 'GRANT ALL PRIVILEGES ON mysqltest.* TO "root"@"localhost" IDENTIFIED BY ""' -uroot
  - mysql --version

#script:
#  - pwd
#  - julia --color=yes -e 'using Octo'
#  - julia --color=yes -e 'using Pkg; Pkg.REPLMode.pkgstr("add DataStreams")'
#  - julia --color=yes -e 'using Pkg; Pkg.REPLMode.pkgstr("add LibPQ")'
#  # - julia --color=yes -e 'using Pkg; Pkg.REPLMode.pkgstr("add MySQL#master")'
#  # - julia --color=yes -e 'using Pkg; Pkg.REPLMode.pkgstr("add SQLite#master")'
#  - cd test
#  - julia --color=yes runtests.jl
#  - cd ..

after_success:
   - if [[ "$TRAVIS_OS_NAME" == osx ]]; then julia -e 'Pkg.add("Coverage"); cd(Pkg.dir("Octo")); using Coverage; Codecov.submit(process_folder())' ; fi
#after_success:
#  # push coverage results to Codecov
#  - pwd
#  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then mkdir -p ~/.julia/dev/Octo ; fi
#  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then mkdir -p ~/.julia/environments/v1.0 ; fi
#  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then cp -r src test REQUIRE Project.toml ~/.julia/dev/Octo/ ; fi
#  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then cat ~/.julia/dev/Octo/test/runtests.jl ; fi
#  - cd
#  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then julia --color=yes -e 'using Pkg; Pkg.REPLMode.pkgstr("dev DataStreams")' ; fi
#  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then julia --color=yes -e 'using Pkg; Pkg.REPLMode.pkgstr("add LibPQ")' ; fi
#  #- if [[ "$TRAVIS_OS_NAME" == osx ]]; then julia --color=yes -e 'using Pkg; Pkg.REPLMode.pkgstr("add MySQL#master")' ; fi
#  - echo -e ""                                                >> manifest
#  - echo -e "[[Octo]]"                                        >> manifest
#  - echo -e "deps = [\"Dates\"]"                              >> manifest
#  - echo -e "path = \"$HOME/.julia/dev/Octo\""                >> manifest
#  - echo -e "uuid = \"c980e7ac-2ea9-11e8-1f3c-e1d64ddcfff6\"" >> manifest
#  - echo -e "version = \"0.1.1\""                             >> manifest
#  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then cat manifest >> ~/.julia/environments/v1.0/Manifest.toml ; fi
#  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then echo -e "Octo = \"c980e7ac-2ea9-11e8-1f3c-e1d64ddcfff6\"" >> ~/.julia/environments/v1.0/Project.toml ; fi
#  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then cat ~/.julia/environments/v1.0/Manifest.toml ; fi
#  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then cat ~/.julia/environments/v1.0/Project.toml ; fi
#  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then julia --color=yes -e 'using Pkg; Pkg.REPLMode.pkgstr("test --coverage Octo")' ; fi
#  - if [[ "$TRAVIS_OS_NAME" == osx ]]; then julia --color=yes -e 'using Pkg; Pkg.REPLMode.pkgstr("add Coverage#master"); using Coverage; Codecov.submit(Codecov.process_folder(normpath(Pkg.devdir(), "Octo", "src")))' ; fi
